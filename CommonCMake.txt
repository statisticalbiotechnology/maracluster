macro(my_set variable default options)
  if(NOT DEFINED ${variable})
    set(${variable} ${default} CACHE STRING ${options} FORCE)
  endif(NOT DEFINED ${variable})
endmacro(my_set)

# STORE NEWLY SET VARIABLES IN *.h.cmake FILES
macro(load_config_files location)
  file(GLOB_RECURSE configurefiles RELATIVE ${location} ${location}/*.cmake )
  foreach(i ${configurefiles})
    string(REPLACE ".cmake" "" myReplFile "${i}")
    configure_file(${location}/${myReplFile}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${myReplFile} @ONLY)
  endforeach()
endmacro()

# useful macro
macro(my_find_program progname)
  find_program(${progname}_EXECUTABLE ${progname})
  if(NOT ${progname}_EXECUTABLE)
    message(FATAL_ERROR  "${progname} not found" )
  endif(NOT ${progname}_EXECUTABLE)
endmacro(my_find_program)

function(get_arch TARGET_ARCH)
  # Detect machine architecture, on UNIX:
  if(UNIX AND NOT APPLE AND NOT DEFINED ${TARGET_ARCH})
	execute_process(COMMAND dpkg --print-architecture
			 OUTPUT_VARIABLE TARGET_ARCH
			 OUTPUT_STRIP_TRAILING_WHITESPACE)
	message(STATUS "Architecture: ${TARGET_ARCH}")
  endif(UNIX AND NOT APPLE AND NOT DEFINED ${TARGET_ARCH})
  if(APPLE AND NOT DEFINED ${TARGET_ARCH})
	execute_process(COMMAND uname -m
			 OUTPUT_VARIABLE TARGET_ARCH
			 OUTPUT_STRIP_TRAILING_WHITESPACE)
	message(STATUS "Architecture: ${TARGET_ARCH}")
  endif(APPLE AND NOT DEFINED ${TARGET_ARCH})
endfunction()

###############################################################################
# SET LOCATION OF MODULE FINDERS
###############################################################################

set(CMAKE_MODULE_PATH ${MARACLUSTER_SOURCE_DIR}/cmake)

###############################################################################
# SET GLOBAL VARIABLES
###############################################################################

# VERSION AND NAMESPACES
set(CPACK_PACKAGE_VERSION_MAJOR "1")
set(CPACK_PACKAGE_VERSION_MINOR "01")
set(CPACK_PACKAGE_VERSION_PATCH "0")

# UPDATE PATCH VERSION FOR INTERMEDIATE BUILDS
INCLUDE(VersionGen)
NIGHTLY_VERSION_GEN(CPACK_PACKAGE_VERSION_PATCH ${CPACK_PACKAGE_VERSION_MAJOR} ${CPACK_PACKAGE_VERSION_MINOR} ${CPACK_PACKAGE_VERSION_PATCH} ${MARACLUSTER_SOURCE_DIR})

IF(MINGW OR MSVC) 
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll" ${CMAKE_FIND_LIBRARY_SUFFIXES})
    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${CMAKE_SOURCE_DIR}/lib/include)
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_SOURCE_DIR}/lib/lib)
    set(WRITABLE_DIR ${XML_REL_PATH})
    add_definitions(-D_WIN32)
ELSE(MINGW OR MSVC)
    #set(CMAKE_INCLUDE_PATH /usr/include ${CMAKE_INCLUDE_PATH})
    #set(CMAKE_LIBRARY_PATH /usr/lib /usr/lib64 ${CMAKE_LIBRARY_PATH})
    set(WRITABLE_DIR ${CMAKE_INSTALL_PREFIX}/${XML_REL_PATH})
ENDIF(MINGW OR MSVC)

IF(MINGW)
  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(MINGW64 1)
    SET(MINGW_PATH /usr/x86_64-w64-mingw32/sys-root/mingw/)  
    SET(MINGW_PACK_NAME win64-mingw-x64)
  ELSE()
    SET(MINGW32 1)
    SET(MINGW_PATH /usr/i686-w64-mingw32/sys-root/mingw/)  
    SET(MINGW_PACK_NAME win32-mingw-x86)  
  ENDIF()
ENDIF(MINGW)

IF(MSVC)
  IF (CMAKE_GENERATOR MATCHES "Win64") 
    SET(MSVC_PACK_NAME win64-msvc-x64) 
  ELSE()
    SET(MSVC_PACK_NAME win32-msvc-x86)  
  ENDIF()
ENDIF(MSVC)

set(PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

#STATIC/DYNAMIC LIBRARY INCLUSION
if(APPLE)
  set(CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.1.0") 
  add_compile_options(-std=c++11) # CMake 2.8.12 or newer
else()
  set(CMAKE_CXX_STANDARD 11)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)  
endif()


if(MINGW OR WIN32 OR APPLE)
  OPTION(BUILD_SHARED_LIBS "build static binaries." OFF)
  OPTION(STATIC "build static binaries. This is mainly intended for the win32-package and the MACOSX-bundle." ON )
else(MINGW OR WIN32 OR APPLE)
  OPTION(STATIC "build static binaries. This is mainly intended for the win32-package and the MACOSX-bundle." OFF )
endif()

# Link Boost static and single threaded
set(Boost_USE_STATIC_LIBS   ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME ON)
set(BOOST_MIN_VERSION "1.43.0")
set(Boost_ADDITIONAL_VERSIONS "1.43.0")

if(NOT APPLE)
  add_definitions(-DBOOST_NO_CXX11_VARIADIC_TEMPLATES)
endif(NOT APPLE)

###############################################################################
# SET SHARED DYNAMIC LINKING LIBRARIES
###############################################################################

if (FALSE)
  # use, i.e. don't skip the full RPATH for the build tree
  SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

  # when building, don't use the install RPATH already
  # (but later on when installing)
  SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 

  SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;${CMAKE_PREFIX_PATH}/lib")

  # add the automatically determined parts of the RPATH
  # which point to directories outside the build tree to the install RPATH
  SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


  # the RPATH to be used when installing, but only if it's not a system directory
  LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
  IF("${isSystemDir}" STREQUAL "-1")
     SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
  ENDIF("${isSystemDir}" STREQUAL "-1")
endif ()

###############################################################################
# SET COMPILER OPTIONS
###############################################################################

IF(APPLE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.9")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmacosx-version-min=10.9")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mmacosx-version-min=10.9")
ENDIF(APPLE)

if(UNIX OR APPLE OR MINGW)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result -Wno-overflow -Wno-deprecated-declarations")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-result -Wno-overflow -Wno-deprecated-declarations")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3 -DNDEBUG")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -O0 -g")
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wall -O0 -g")
endif()

if(MSVC)
  add_definitions (/MP /D _CRT_SECURE_NO_WARNINGS /D _CRT_NONSTDC_NO_DEPRECATE)
  # CMake automatically configures VS to use multi threading, 
  # if boost would use single threading, the auto-linking process of boost would fail.
  set(Boost_USE_MULTITHREADED ON)
endif(MSVC)

find_package(OpenMP)
if (OPENMP_FOUND)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
